plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id "io.freefair.lombok" version "6.5.1"
    id 'com.google.protobuf' version '0.9.4'
}

group = 'home.nkt'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

ext {
    mapstructVersion = '1.5.5.Final'
    sourceProtoFilesDir = '../src/main/resources'
    generatedProtoClassesDir = 'src/main/java/home/nkt/generated/protobuf/'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    implementation 'org.codehaus.janino:janino:3.1.12'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    implementation("org.mapstruct:mapstruct:${mapstructVersion}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")

    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'

    implementation 'com.google.protobuf:protobuf-java:3.24.0'
    implementation 'com.google.protobuf:protobuf-java-util:4.26.1'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql:1.19.7'


    compileJava {
        options.compilerArgs = [
                '-Amapstruct.defaultComponentModel=spring'
        ]
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.18.0"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.31.1"
        }
    }
    generateProtoTasks {
        all().each { task ->
            def generatedFilesTree = fileTree(dir: generatedProtoClassesDir).files
            def isEmptyProtoDir = generatedFilesTree.isEmpty()
            if (isEmptyProtoDir) {
                task.plugins {
                    grpc {
                    }
                }
                return
            }
            def (excludeProtoFiles) = getExcludeProtoFiles(generatedFilesTree)
            if (excludeProtoFiles) {
                sourceSets.main.proto.exclude(excludeProtoFiles)
            } else {
                task.enabled = false
            }
        }
    }
}

private List<String> getExcludeProtoFiles(Set<File> generatedFilesTree) {
    def generatedClassNames = generatedFilesTree.collect { file ->
        file.name.split('\\.')[0]
    }
    def protoFilesTree = fileTree(dir: sourceProtoFilesDir)
    def protoFilesNameCollection = protoFilesTree.collect { file ->
        file.name
    }
    def excludeProtoFiles = []
    protoFilesNameCollection.each { protoFileName ->
        def protoContent = file(sourceProtoFilesDir + '/' + protoFileName).text
        def outerClassName
        def matcher = (protoContent =~ /option\s+java_outer_classname\s*=\s*["']([^"']+)["']/)
        if (matcher.find()) {
            outerClassName = matcher.group(1)
        } else {
            outerClassName = protoFileName.split('\\.')[0]
        }
        if (generatedClassNames.contains(outerClassName)) {
            excludeProtoFiles.add(protoFileName)
        }
    }
    return [excludeProtoFiles] as List<String>
}

sourceSets {
    main {
        proto {
            srcDirs sourceProtoFilesDir
        }
        java {
            srcDirs 'src/main/java'
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
